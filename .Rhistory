summary(m_lm)
rmse(df$RECOMMEND_TBV, predict(m_lm, df))
vif(m_lm)
summary(m_lm)
df = read.csv('data/processed/all_sentiment.csv')
colnames(df)
colnames(df)[:18]
colnames(df)[1:18]
for(i in colnames(df)[1:18]){
print(i)
}
print(i[1])
for(i in colnames(df)[1:18]){
print(i[1])
}
colnames(Df)
colnames(df)
m_lm = lm(RECOMMEND_TBV ~ ., data=df[,1:18])
summary(m_lm)
vif(m_lm)
df = read.csv('data/processed/all_sentiment.csv')
colnames(df)
m_lm = lm(RECOMMEND_TBV ~ ., data=df[,1:13])
summary(m_lm)
df$EMO_REL_TBV
m_lm = lm(RECOMMEND_TBV ~ ., data=df[,1:13])
summary(m_lm)
m_lm = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV, data=df[,1:13])
summary(m_lm)
vif(m_lm)
m_lm = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV, data=df[,1:13])
summary(m_lm)
m_lm = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_lm)
vif(m_lm)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
colnames(df)
m_adj = lm(RECOMMEND_TBV ~ ., data=df[14:19])
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
colnames(df)
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
m_drop_respect = lm(RECOMMEND_TBV ~ ., data=df[c(1,14,16:19)])
summary(m_drop_respect)
vif(m_drop_respect)
rmse(df$RECOMMEND_TBV, predict(m_drop_respect, df))
mae(df$RECOMMEND_TBV, predict(m_drop_respect, df))
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
rmse(df$RECOMMEND_TBV, predict(m_drop_respect, df))
mae(df$RECOMMEND_TBV, predict(m_drop_respect, df))
colnames(df)
m_raw_top = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV,
data=df[, c(1,3,5,7,9,11,13)])
m_raw_top = lm(RECOMMEND_TBV ~ .,
data=df[, c(1,3,5,7,9,11,13)])
summary(m_raw_top)
vif(m_raw_top)
rmse(df$RECOMMEND_TBV, predict(m_raw_top, df))
mae(df$RECOMMEND_TBV, predict(m_raw_top, df))
m_drop_respect = lm(RECOMMEND_TBV ~ ., data=df[c(1,14,16:19)])
summary(m_drop_respect)
vif(m_drop_respect)
rmse(df$RECOMMEND_TBV, predict(m_drop_respect, df))
mae(df$RECOMMEND_TBV, predict(m_drop_respect, df))
m_raw_top = lm(RECOMMEND_TBV ~ .,
data=df[, c(1,3,7,9,11,13)])
summary(m_raw_top)
vif(m_raw_top)
rmse(df$RECOMMEND_TBV, predict(m_raw_top, df))
mae(df$RECOMMEND_TBV, predict(m_raw_top, df))
m_drop_respect = lm(RECOMMEND_TBV ~ ., data=df[c(1,14,16:19)])
summary(m_drop_respect)
vif(m_drop_respect)
rmse(df$RECOMMEND_TBV, predict(m_drop_respect, df))
mae(df$RECOMMEND_TBV, predict(m_drop_respect, df))
df = read.csv('data/processed/all_sentiment.csv')
colnames(df)
df = read.csv('data/processed/rating_all_sentiment.csv')
colnames(df)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RATING_EST ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
rmse(df$RATING_EST, predict(m_raw, df))
mae(df$RATING_EST, predict(m_raw, df))
m_adj = lm(RATING_EST ~ ., data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RATING_EST, predict(m_adj, df))
mae(df$RATING_EST, predict(m_adj, df))
rmse(df$RATING_EST, predict(m_raw, df))
mae(df$RATING_EST, predict(m_raw, df))
df = read.csv('data/processed/ratio_all_sentiment.csv')
colnames(df)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ .-RESPECT_BTR, data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
summary(m_raw)
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV-RESPECT_BBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ .-RESPECT_BTR, data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
corr(df$SYMPTOMS_BBV, df$SYMPTOMS_TBV)
cor(df$SYMPTOMS_BBV, df$SYMPTOMS_TBV)
df = read.csv('data/processed/managed_all_sentiment.csv')
# All sentiments (removed some to avoid rank problems)
m_raw = lm(RECOMMEND_TBV ~ .-EMO_REL_BBV-RESPECT_TBV-RESPECT_BBV, data=df[,1:13])
summary(m_raw)
vif(m_raw)
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
m_adj = lm(RECOMMEND_TBV ~ ., data=df[c(1,14:19)])
summary(m_adj)
vif(m_adj)
rmse(df$RECOMMEND_TBV, predict(m_adj, df))
mae(df$RECOMMEND_TBV, predict(m_adj, df))
rmse(df$RECOMMEND_TBV, predict(m_raw, df))
mae(df$RECOMMEND_TBV, predict(m_raw, df))
?rmse
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
m_raw = lm(would_recommend ~ ., data=df[raw_values])
managed_values = c("would_recommend", colnames(df)[26:31])
m_raw = lm(would_recommend ~ ., data=df[raw_values])
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
raw_values = colnames(df)[1:13]
ratio_values = c("would_recommend", colnames(df)[14:19])
adj_values = c("would_recommend", colnames(df)[20:25])
managed_values = c("would_recommend", colnames(df)[26:31])
m_raw = lm(would_recommend ~ ., data=df[raw_values])
summary(m_raw)
?rmse
rmse(df$would_recommend, predict(m_raw, df[raw_values]))
m_raw = lm(would_recommend ~ .-EMO_REL_BBV, data=df[raw_values])
summary(m_raw)
rmse(df$would_recommend, predict(m_raw, df[raw_values]))
mae(df$would_recommend, predict(m_raw, df[raw_values]))
colnames(df)
m_raw = lm(would_recommend ~ .-EMO_REL_BBV, data=df[raw_values])
summary(m_raw)
colnames(df)
top_values = colnames(df)[c(1, 3, 5, 7, 9, 11, 13)]
m_raw = lm(would_recommend ~ .-EMO_REL_BBV, data=df[raw_values])
summary(m_raw)
rmse(df$would_recommend, predict(m_raw, df[raw_values]))
mae(df$would_recommend, predict(m_raw, df[raw_values]))
m_top = lm(would_recommend ~ .-EMO_REL_BBV, data=df[top_values])
m_top = lm(would_recommend ~ ., data=df[top_values])
summary(m_top)
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
m_adj = lm(would_recommend ~ ., data=df[adj_values])
summary(m_adj)
rmse(df$would_recommend, predict(m_adj, df[adj_values]))
mae(df$would_recommend, predict(m_adj, df[adj_values]))
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
m_man = lm(would_recommend ~ ., data=df[managed_values])
summary(m_man)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
rmse(df$would_recommend, predict(m_adj, df[adj_values]))
mae(df$would_recommend, predict(m_adj, df[adj_values]))
m_adj = lm(would_recommend ~ ., data=df[ratio_values])
summary(m_adj)
rmse(df$would_recommend, predict(m_adj, df[ratio_values]))
mae(df$would_recommend, predict(m_adj, df[ratio_values]))
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
m_man = lm(would_recommend ~ .-MANAGED_RESPECT, data=df[managed_values])
summary(m_man)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
rmse(df$would_recommend, predict(m_adj, df[ratio_values]))
mae(df$would_recommend, predict(m_adj, df[ratio_values]))
summary(m_top)
m_top = lm(would_recommend ~ .-RESPECT_TBV, data=df[top_values])
summary(m_top)
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
m_man = lm(would_recommend ~ .-MANAGED_RESPECT, data=df[managed_values])
summary(m_man)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
vif(m_top)
m_top = lm(would_recommend ~ ., data=df[top_values])
vif(m_top)
vif(m_man)
m_man = lm(would_recommend ~ ., data=df[managed_values])
vif(m_man)
df = read.csv('data/processed/middle_vars')
df = read.csv('data/processed/middle_vars.csv')
df = read.csv('data/processed/middle_vars.csv')
m_mid = lm(would_recommend ~ ., data=df)
summary(m_mid)
rmse(df$would_recommend, predict(m_mid, df))
mae(df$would_recommend, predict(m_mid, df))
vif(m_mid)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
raw_values = colnames(df)[1:13]
top_values = colnames(df)[c(1, 3, 5, 7, 9, 11, 13)]
ratio_values = c("would_recommend", colnames(df)[c(1, 14:19)])
adj_values = c("would_recommend", colnames(df)[c(1, 20:25)])
managed_values = c("would_recommend", colnames(df)[c(1, 26:31)])
m_top = lm(would_recommend ~ ., data=df[top_values])
summary(m_top)
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
vif(m_top)
m_man = lm(would_recommend ~ ., data=df[managed_values])
summary(m_man)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
vif(m_man)
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
raw_values = colnames(df)[1:13]
top_values = colnames(df)[c(1, 3, 5, 7, 9, 11, 13)]
ratio_values = c("would_recommend", colnames(df)[c(1, 14:19)])
adj_values = c("would_recommend", colnames(df)[c(1, 20:25)])
managed_values = c("would_recommend", colnames(df)[c(1, 26:31)])
m_top = lm(would_recommend ~ ., data=df[top_values])
summary(m_top)
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
vif(m_top)
m_man = lm(would_recommend ~ ., data=df[managed_values])
summary(m_man)
colnames(df)
m_man = lm(would_recommend ~ ., data=df[managed_values])
summary(m_man)
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
raw_values = colnames(df)[1:13]
top_values = colnames(df)[c(1, 3, 5, 7, 9, 11, 13)]
ratio_values = c("would_recommend", colnames(df)[14:19])
adj_values = c("would_recommend", colnames(df)[20:25])
managed_values = c("would_recommend", colnames(df)[26:31])
m_raw = lm(would_recommend ~ .-EMO_REL_BBV, data=df[raw_values])
summary(m_raw)
rmse(df$would_recommend, predict(m_raw, df[raw_values]))
mae(df$would_recommend, predict(m_raw, df[raw_values]))
m_top = lm(would_recommend ~ ., data=df[top_values])
summary(m_top)
rmse(df$would_recommend, predict(m_top, df[top_values]))
mae(df$would_recommend, predict(m_top, df[top_values]))
vif(m_top)
vif(m_top)
m_man = lm(would_recommend ~ ., data=df[managed_values])
summary(m_man)
rmse(df$would_recommend, predict(m_man, df[managed_values]))
mae(df$would_recommend, predict(m_man, df[managed_values]))
vif(m_man)
df_mid = read.csv('data/processed/middle_vars.csv')
m_mid = lm(would_recommend ~ ., data=df_mid)
summary(m_mid)
rmse(df_mid$would_recommend, predict(m_mid, df_mid))
mae(df_mid$would_recommend, predict(m_mid, df_mid))
vif(m_mid)
df = read.csv('data/processed/would_recommend.csv')
colnames(df)
m_wr = lm(would_recommend ~ ., data=df)
summary(m_wr)
vif(m_wr)
m_wr = lm(would_recommend ~ n_win_60, data=df)
summary(m_wr)
m_wr = lm(would_recommend ~ ., data=df)
summary(m_wr)
m_wr = lm(would_recommend ~ .-for_profit, data=df)
summary(m_wr)
m_wr = lm(would_recommend ~ .-for_profit-physicianCtPB, data=df)
summary(m_wr)
m_wr = lm(would_recommend ~ physicianCtPB, data=df)
summary(m_wr)
df$would_recommend
mean(df$would_recommend)
max(df$would_recommend)
((df$would_recommend*(nrow(df) − 1) + 0.5)/nrow(df)
((df$would_recommend*(nrow(df)-1) + 0.5)/nrow(df)
((df$would_recommend*(nrow(df)-1) + 0.5)/nrow(df))
alsdkjf
((df$would_recommend*(nrow(df)-1) + 0.5)/nrow(df))
((df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df))
max((df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df))
max(df$would_recommend)
mean(df$would_recommend)
mean((df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df))
beta_df$would_recommend = (df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df)
beta_df = df
beta_df$would_recommend = (df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df)
m_wr_beta = betareg(would_recommend ~ ., data=beta_df)
summary(beta)
beta_df = df
beta_df$would_recommend = (df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df)
m_wr_beta = betareg(would_recommend ~ ., data=beta_df)
summary(beta)
summary(m_wr_beta)
rmse(df$would_recommend, predict(m_wr_beta, beta_df))
mae(df$would_recommend, predict(m_wr_beta, beta_df))
rmse(beta_df$would_recommend, predict(m_wr_beta, beta_df))
mae(dbeta_df$would_recommend, predict(m_wr_beta, beta_df))
summary(m_wr_beta)
rmse(beta_df$would_recommend, predict(m_wr_beta, beta_df))
mae(beta_df$would_recommend, predict(m_wr_beta, beta_df))
f_K_fold <- function(Nobs,K=5){
rs <- runif(Nobs)
id <- seq(Nobs)[order(rs)]
k <- as.integer(Nobs*seq(1,K-1)/K)
k <- matrix(c(0,rep(k,each=2),Nobs),ncol=2,byrow=TRUE)
k[,1] <- k[,1]+1
l <- lapply(seq.int(K),function(x,k,d)
list(train=d[!(seq(d) %in% seq(k[x,1],k[x,2]))],
test=d[seq(k[x,1],k[x,2])]),k=k,d=id)
return(l)
}
beta_df = df
beta_df$would_recommend = (df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df)
beta_df$y = beta_df$would_recommend
beta_df$would_recommend = NULL
f_K_fold <- function(Nobs,K=5){
rs <- runif(Nobs)
id <- seq(Nobs)[order(rs)]
k <- as.integer(Nobs*seq(1,K-1)/K)
k <- matrix(c(0,rep(k,each=2),Nobs),ncol=2,byrow=TRUE)
k[,1] <- k[,1]+1
l <- lapply(seq.int(K),function(x,k,d)
list(train=d[!(seq(d) %in% seq(k[x,1],k[x,2]))],
test=d[seq(k[x,1],k[x,2])]),k=k,d=id)
return(l)
}
beta_kfold = function(df, n_folds){
rmse_test_out = c()
mse_test_out = c()
mae_test_out = c()
r2_test_out = c()
rmse_train_out = c()
mse_train_out = c()
mae_train_out = c()
r2_train_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = betareg(would_recommend ~ .,
df[fold$train,])
preds = predict(m, newdata=df[fold$test,])
train_preds = predict(m, newdata=df[fold$train,])
rmse_test_out = append(rmse_test_out,
rmse(df$y[fold$test], preds))
mse_test_out = append(mse_test_out,
mse(df$y[fold$test], preds))
r2_test_out = append(r2_test_out,
R2_Score(preds, df$y[fold$test]))
mae_test_out = append(mae_test_out,
mae(df$y[fold$test], preds))
rmse_train_out = append(rmse_train_out,
rmse(df$y[fold$train], train_preds))
mse_train_out = append(mse_train_out,
mse(df$y[fold$train], train_preds))
mae_train_out = append(mae_train_out,
mae(df$y[fold$train], train_preds))
r2_train_out = append(r2_train_out,
R2_Score(train_preds, df$y[fold$train]))
}
list(test=list(rmse=rmse_test_out, mse=mse_test_out, mae=mae_test_out,
r2=r2_test_out),
train=list(rmse=rmse_train_out, mse=mse_train_out, mae=mae_train_out,
r2=r2_train_out))
}
eval = beta_kfold(beta_df, 5)
beta_df = df
beta_df$would_recommend = (df$would_recommend*.01*(nrow(df)-1) + 0.5)/nrow(df)
beta_df$y = beta_df$would_recommend
beta_df$would_recommend = NULL
f_K_fold <- function(Nobs,K=5){
rs <- runif(Nobs)
id <- seq(Nobs)[order(rs)]
k <- as.integer(Nobs*seq(1,K-1)/K)
k <- matrix(c(0,rep(k,each=2),Nobs),ncol=2,byrow=TRUE)
k[,1] <- k[,1]+1
l <- lapply(seq.int(K),function(x,k,d)
list(train=d[!(seq(d) %in% seq(k[x,1],k[x,2]))],
test=d[seq(k[x,1],k[x,2])]),k=k,d=id)
return(l)
}
beta_kfold = function(df, n_folds){
rmse_test_out = c()
mse_test_out = c()
mae_test_out = c()
r2_test_out = c()
rmse_train_out = c()
mse_train_out = c()
mae_train_out = c()
r2_train_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = betareg(y ~ .,
df[fold$train,])
preds = predict(m, newdata=df[fold$test,])
train_preds = predict(m, newdata=df[fold$train,])
rmse_test_out = append(rmse_test_out,
rmse(df$y[fold$test], preds))
mse_test_out = append(mse_test_out,
mse(df$y[fold$test], preds))
r2_test_out = append(r2_test_out,
R2_Score(preds, df$y[fold$test]))
mae_test_out = append(mae_test_out,
mae(df$y[fold$test], preds))
rmse_train_out = append(rmse_train_out,
rmse(df$y[fold$train], train_preds))
mse_train_out = append(mse_train_out,
mse(df$y[fold$train], train_preds))
mae_train_out = append(mae_train_out,
mae(df$y[fold$train], train_preds))
r2_train_out = append(r2_train_out,
R2_Score(train_preds, df$y[fold$train]))
}
list(test=list(rmse=rmse_test_out, mse=mse_test_out, mae=mae_test_out,
r2=r2_test_out),
train=list(rmse=rmse_train_out, mse=mse_train_out, mae=mae_train_out,
r2=r2_train_out))
}
eval = beta_kfold(beta_df, 5)
eval
print(mean(score))
for(score in eval){
print(mean(score))
}
eval
for(score in eval$test){
print(mean(score))
}
for(score in eval$test){
print(score)
print(mean(score))
}
for(score in eval$test){
print(mean(score))
}
mae(df$would_recommend, predict(m_wr_beta, df))
rmse(df$would_recommend, predict(m_wr, df))
mae(df$would_recommend, predict(m_wr, df))
m_wr = lm(would_recommend ~ ., data=df)
summary(m_wr)
rmse(df$would_recommend, predict(m_wr, df))
mae(df$would_recommend, predict(m_wr, df))
for(score in eval$test){
print(mean(score))
}
