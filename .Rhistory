df = read.csv('data/processed/mvp.csv')
library(lme4)
library(lmerTest)
head(df)
df = read.csv('data/processed/mvp.csv')
head(df)
m0 <- lmer(neg_rec ~ .-neg_rec
+ (State|ccn),
data=df,
REML=T)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn
+ (1|State),
data=df,
REML=T)
summary(m0)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df,
REML=T)
summary(m0)
df$Ownership.Type = relevel(df$Ownership.Type, 'Non-Profit')
head(df)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df,
REML=T)
summary(m0)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (.||State),
data=df,
REML=T)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df,
REML=T)
summary(m0)
summary(m0)$call
lmer(summary(m0)$call,
data=df,
REML=T)
summary(lmer(summary(m0)$call,
data=df,
REML=T))
f_K_fold <- function(Nobs,K=5){
rs <- runif(Nobs)
id <- seq(Nobs)[order(rs)]
k <- as.integer(Nobs*seq(1,K-1)/K)
k <- matrix(c(0,rep(k,each=2),Nobs),ncol=2,byrow=TRUE)
k[,1] <- k[,1]+1
l <- lapply(seq.int(K),function(x,k,d)
list(train=d[!(seq(d) %in% seq(k[x,1],k[x,2]))],
test=d[seq(k[x,1],k[x,2])]),k=k,d=id)
return(l)
}
f_K_fold(500)
huh = f_K_fold(500)
ls(huh)
huh[1]
huh[1]$train
huh[[1]]$train
rs <- runif(Nobs)
rs <- runif(50)
seq(Nobs)[order(rs)]
seq(50)[order(rs)]
rs
seq(50)[order(rs)]
dim(df)
dim(df)[2]
install.packages("Metrics")
library(Metrics)
for(i in huh){
print(i)
}
print(i$train)
for(i in huh){
print(i$train)
}
df[c(3,5,6),]
?predict
?predict.merMod
?append
?rmse
?mse
?mae
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out, rmse(df[fold$test, neg_rec]))
mse_out = append(mse_out, mse(df[fold$test, neg_rec]))
mae_out = append(mae_out, mae(df[fold$test, neg_rec]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0$call), 10)
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,], re.form=NA)
rmse_out = append(rmse_out, rmse(df[fold$test, neg_rec]))
mse_out = append(mse_out, mse(df[fold$test, neg_rec]))
mae_out = append(mae_out, mae(df[fold$test, neg_rec]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df,
REML=T)
summary(m0)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df[:600,],
REML=T)
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df[1:600,],
REML=T)
summary(m0)
predict(m0, df[1000:dim(df)[1],])
predict(m0, newdata = df[1000:dim(df)[1],])
predict(m0, newdata = df[1:600,])
m0 <- lmer(neg_rec ~ .-neg_rec-ccn-State
+ (1|State),
data=df,
REML=T)
predict(m0, newdata = df)
head(df)
m0 <- lmer(neg_rec ~ epStayCt+medStanPayPerBen
+ (1|State),
data=df,
REML=T)
summary(m0)
predict(m0, newdata = df)
colnames(df)
m0 <- lmer(neg_rec ~ Ownership Type +
days_operation +
Average_Daily_Census +
H_001_01_OBSERVED +
H_002_01_OBSERVED +
H_003_01_OBSERVED +
H_004_01_OBSERVED +
H_005_01_OBSERVED +
H_006_01_OBSERVED +
H_007_01_OBSERVED +
H_008_01_OBSERVED +
H_009_01_OBSERVED +
percRuralZipBenv
aveAge +
percMale +
aveHomeHealth7dp +
percSOSDhome +
percSOSDassisLiv +
percSOSlongtermcare +
percSOSskilledNurse +
percSOSinpatient +
percSOSinpatientHospice +
EMO_REL_BBV +
EMO_REL_TBV +
RESPECT_BBV +
RESPECT_MBV +
RESPECT_TBV +
SYMPTOMS_BBV +
SYMPTOMS_MBV +
SYMPTOMS_TBV +
TEAM_COMM_BBV +
TEAM_COMM_MBV +
TEAM_COMM_TBV +
TIMELY_CARE_BBV +
TIMELY_CARE_MBV +
TIMELY_CARE_TBV +
TRAINING_BBV +
TRAINING_MBV +
TRAINING_TBV +
distinctBens +
epStayCt +
medStanPayPerBen
+ (1|State),
data=df,
REML=T)
m0 <- lmer(neg_rec ~ Ownership Type +
days_operation +
Average_Daily_Census +
H_001_01_OBSERVED +
H_002_01_OBSERVED +
H_003_01_OBSERVED +
H_004_01_OBSERVED +
H_005_01_OBSERVED +
H_006_01_OBSERVED +
H_007_01_OBSERVED +
H_008_01_OBSERVED +
H_009_01_OBSERVED +
percRuralZipBenv
aveAge +
percMale +
aveHomeHealth7dp +
percSOSDhome +
percSOSDassisLiv +
percSOSlongtermcare +
percSOSskilledNurse +
percSOSinpatient +
percSOSinpatientHospice +
EMO_REL_BBV +
EMO_REL_TBV +
RESPECT_BBV +
RESPECT_MBV +
RESPECT_TBV +
SYMPTOMS_BBV +
SYMPTOMS_MBV +
SYMPTOMS_TBV +
TEAM_COMM_BBV +
TEAM_COMM_MBV +
TEAM_COMM_TBV +
TIMELY_CARE_BBV +
TIMELY_CARE_MBV +
TIMELY_CARE_TBV +
TRAINING_BBV +
TRAINING_MBV +
TRAINING_TBV +
distinctBens +
epStayCt +
medStanPayPerBen + (1|State),
data=df,
REML=T)
colnames(df)
m0 <- lmer(neg_rec ~ Ownership.Type +
days_operation +
Average_Daily_Census +
H_001_01_OBSERVED +
H_002_01_OBSERVED +
H_003_01_OBSERVED +
H_004_01_OBSERVED +
H_005_01_OBSERVED +
H_006_01_OBSERVED +
H_007_01_OBSERVED +
H_008_01_OBSERVED +
H_009_01_OBSERVED +
percRuralZipBenv +
aveAge +
percMale +
aveHomeHealth7dp +
percSOSDhome +
percSOSDassisLiv +
percSOSlongtermcare +
percSOSskilledNurse +
percSOSinpatient +
percSOSinpatientHospice +
EMO_REL_BBV +
EMO_REL_TBV +
RESPECT_BBV +
RESPECT_MBV +
RESPECT_TBV +
SYMPTOMS_BBV +
SYMPTOMS_MBV +
SYMPTOMS_TBV +
TEAM_COMM_BBV +
TEAM_COMM_MBV +
TEAM_COMM_TBV +
TIMELY_CARE_BBV +
TIMELY_CARE_MBV +
TIMELY_CARE_TBV +
TRAINING_BBV +
TRAINING_MBV +
TRAINING_TBV +
distinctBens +
epStayCt +
medStanPayPerBen + (1|State),
data=df,
REML=T)
m0 <- lmer(neg_rec ~ Ownership.Type +
days_operation +
Average_Daily_Census +
H_001_01_OBSERVED +
H_002_01_OBSERVED +
H_003_01_OBSERVED +
H_004_01_OBSERVED +
H_005_01_OBSERVED +
H_006_01_OBSERVED +
H_007_01_OBSERVED +
H_008_01_OBSERVED +
H_009_01_OBSERVED +
percRuralZipBen +
aveAge +
percMale +
aveHomeHealth7dp +
percSOSDhome +
percSOSDassisLiv +
percSOSlongtermcare +
percSOSskilledNurse +
percSOSinpatient +
percSOSinpatientHospice +
EMO_REL_BBV +
EMO_REL_TBV +
RESPECT_BBV +
RESPECT_MBV +
RESPECT_TBV +
SYMPTOMS_BBV +
SYMPTOMS_MBV +
SYMPTOMS_TBV +
TEAM_COMM_BBV +
TEAM_COMM_MBV +
TEAM_COMM_TBV +
TIMELY_CARE_BBV +
TIMELY_CARE_MBV +
TIMELY_CARE_TBV +
TRAINING_BBV +
TRAINING_MBV +
TRAINING_TBV +
distinctBens +
epStayCt +
medStanPayPerBen + (1|State),
data=df,
REML=T)
summary(m0)
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out, rmse(df[fold$test,], df[fold$test,neg_rec]))
mse_out = append(mse_out, mse(df[fold$test,], df[fold$test,neg_rec]]))
mae_out = append(mae_out, mae(df[fold$test,], df[fold$test,neg_rec]]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out, rmse(df[fold$test,], df[fold$test, neg_rec]))
mse_out = append(mse_out, mse(df[fold$test,], df[fold$test, neg_rec]))
mae_out = append(mae_out, mae(df[fold$test,], df[fold$test, neg_rec]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out, rmse(df[fold$test,], df[fold$test,
df$neg_rec[fold$test]]))
mse_out = append(mse_out, mse(df[fold$test,], df[fold$test,
df$neg_rec[fold$test]]))
mae_out = append(mae_out, mae(df[fold$test,], df[fold$test,
df$neg_rec[fold$test]]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out, rmse(df[fold$test,], df[fold$test,],
df$neg_rec[fold$test]))
mse_out = append(mse_out, mse(df[fold$test,], df[fold$test,],
df$neg_rec[fold$test]))
mae_out = append(mae_out, mae(df[fold$test,], df[fold$test,],
df$neg_rec[fold$test]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out,
rmse(df[fold$test,], df$neg_rec[fold$test]))
mse_out = append(mse_out,
mse(df[fold$test,], df$neg_rec[fold$test]))
mae_out = append(mae_out,
mae(df[fold$test,], df$neg_rec[fold$test]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
#    preds = predict(m, newdata=df[fold$test,])
# rmse_out = append(rmse_out,
#                   rmse(df[fold$test,], df$neg_rec[fold$test]))
# mse_out = append(mse_out,
#                  mse(df[fold$test,], df$neg_rec[fold$test]))
# mae_out = append(mae_out,
#                  mae(df[fold$test,], df$neg_rec[fold$test]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
# rmse_out = append(rmse_out,
#                   rmse(df[fold$test,], df$neg_rec[fold$test]))
# mse_out = append(mse_out,
#                  mse(df[fold$test,], df$neg_rec[fold$test]))
# mae_out = append(mae_out,
#                  mae(df[fold$test,], df$neg_rec[fold$test]))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
?rmse
lmer_kfold = function(df, call, n_folds){
rmse_out = c()
mse_out = c()
mae_out = c()
folds = f_K_fold(dim(df)[1], n_folds)
for(fold in folds){
m = lmer(call,
df[fold$train,],
REML=T)
preds = predict(m, newdata=df[fold$test,])
rmse_out = append(rmse_out,
rmse(df$neg_rec[fold$test], preds))
mse_out = append(mse_out,
mse(df$neg_rec[fold$test], preds))
mae_out = append(mae_out,
mae(df$neg_rec[fold$test], preds))
}
list(rmse=rmse_out, mse=mse_out, mae=mae_out)
}
kfold_results = lmer_kfold(df, summary(m0)$call, 10)
kfold_results
plot(m0)
